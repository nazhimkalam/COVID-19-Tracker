{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","active","color","total","props","Card","onClick","className","CardContent","Typography","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","casesTypeColors","hex","multiplier","recovered","deaths","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","CountryCode","target","FormControl","Select","variant","onChange","MenuItem","countryData","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.014039d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\nimport './InfoBox.css';\r\n\r\nfunction InfoBox({ title, cases, active, color, total, ...props }) {\r\n\treturn (\r\n\t\t<Card onClick={props.onClick} className={`infoBox ${active && `infoBox--${color}`}`}>\r\n\t\t\t<CardContent>\r\n\t\t\t\t<Typography color=\"textSecondary\" className=\"infoBox__title\">\r\n\t\t\t\t\t{title}\r\n\t\t\t\t</Typography>\r\n\r\n\t\t\t\t<h2 className={`infoBox__cases ${`infoBox--case--${color}`}`}>{cases}</h2>\r\n\r\n\t\t\t\t<Typography color=\"textSecondary\" className=\"infoBox__total\">\r\n\t\t\t\t\t{total} Total\r\n\t\t\t\t</Typography>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t);\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport { Circle, Popup } from 'react-leaflet';\r\nimport './Map.css';\r\n\r\n// SORTING THE COUNTRIES ACCORDING TO THE CASES\r\nexport const sortData = (data) => {\r\n\tconst sortedData = [...data];\r\n\tsortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n\treturn sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) => (stat ? `+${numeral(stat).format('0.0a')}` : '+0');\r\n\r\n// DRAWING CIRCLES ON THE MAP\r\nconst casesTypeColors = {\r\n\tcases: {\r\n\t\thex: '#CC1034',\r\n\t\tmultiplier: 800,\r\n\t},\r\n\trecovered: {\r\n\t\thex: '#7dd71d',\r\n\t\tmultiplier: 1200,\r\n\t},\r\n\tdeaths: {\r\n\t\thex: '#004ddd',\r\n\t\tmultiplier: 2000,\r\n\t},\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType = 'cases') =>\r\n\t// due to NO {} the below code will get returned\r\n\tdata.map((country) => (\r\n\t\t<Circle\r\n\t\t\tcenter={[country.countryInfo.lat, country.countryInfo.long]}\r\n\t\t\tfillOpacity={0.4}\r\n\t\t\tcolor={casesTypeColors[casesType].hex}\r\n\t\t\tfillColor={casesTypeColors[casesType].hex}\r\n\t\t\tradius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\r\n\t\t>\r\n\t\t\t<Popup>\r\n\t\t\t\t<div className=\"info-container\">\r\n\t\t\t\t\t<div className=\"info-flag\" style={{ backgroundImage: `url(${country.countryInfo.flag})` }} />\r\n\t\t\t\t\t<div className=\"info-name\">{country.country}</div>\r\n\t\t\t\t\t<div className=\"info-confirmed\">Cases: {numeral(country.cases).format('0,0')}</div>\r\n\t\t\t\t\t<div className=\"info-recovered\">Recovered: {numeral(country.recovered).format('0,0')}</div>\r\n\t\t\t\t\t<div className=\"info-deaths\">Deaths: {numeral(country.deaths).format('0,0')}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Popup>\r\n\t\t</Circle>\r\n\t));\r\n","import React from 'react';\r\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\r\nimport './Map.css';\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n\treturn (\r\n\t\t<div className=\"map\">\r\n\t\t\t<LeafletMap center={center} zoom={zoom}>\r\n\t\t\t\t<TileLayer\r\n\t\t\t\t\turl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n\t\t\t\t\tattribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t{/* drawing the circles on the countries */}\r\n                { showDataOnMap(countries, casesType) }\r\n\t\t\t</LeafletMap>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from 'numeral';\r\n\r\nfunction Table({ countries }) {\r\n\treturn (\r\n\t\t<div className=\"table\">\r\n\t\t\t{countries.map(({ country, cases }) => (\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td>{country}</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<strong>{numeral(cases).format(',')}</strong>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n\tlegend: {\r\n\t\tdisplay: false,\r\n\t},\r\n\telements: {\r\n\t\tpoint: {\r\n\t\t\tradius: 0,\r\n\t\t},\r\n\t},\r\n\tmaintainAspectRatio: false,\r\n\ttooltips: {\r\n\t\tmode: 'index',\r\n\t\tintersect: false,\r\n\t\tcallbacks: {\r\n\t\t\tlabel: function (tooltipItem, data) {\r\n\t\t\t\treturn numeral(tooltipItem.value).format('+0,0');\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n\tscales: {\r\n\t\txAxes: [\r\n\t\t\t{\r\n\t\t\t\ttype: 'time',\r\n\t\t\t\ttime: {\r\n\t\t\t\t\tformat: 'MM/DD/YY',\r\n\t\t\t\t\ttooltipFormat: 'll',\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t\tyAxes: [\r\n\t\t\t{\r\n\t\t\t\tgridLines: {\r\n\t\t\t\t\tdisplay: false,\r\n\t\t\t\t},\r\n\t\t\t\tticks: {\r\n\t\t\t\t\t// Include a dollar sign in the ticks\r\n\t\t\t\t\tcallback: function (value, index, values) {\r\n\t\t\t\t\t\treturn numeral(value).format('0a');\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t},\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n\tlet chartData = [];\r\n\tlet lastDataPoint;\r\n\tfor (let date in data.cases) {\r\n\t\tif (lastDataPoint) {\r\n\t\t\tlet newDataPoint = {\r\n\t\t\t\tx: date,\r\n\t\t\t\ty: data[casesType][date] - lastDataPoint,\r\n\t\t\t};\r\n\t\t\tchartData.push(newDataPoint);\r\n\t\t}\r\n\t\tlastDataPoint = data[casesType][date];\r\n\t}\r\n\treturn chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n\tconst [data, setData] = useState({});\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchData = async () => {\r\n\t\t\tawait fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t})\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\tlet chartData = buildChartData(data, casesType);\r\n\t\t\t\t\tsetData(chartData);\r\n\t\t\t\t\tconsole.log(chartData);\r\n\t\t\t\t\t// buildChart(chartData);\r\n\t\t\t\t});\r\n\t\t};\r\n\r\n\t\tfetchData();\r\n\t}, [casesType]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{data?.length > 0 && (\r\n\t\t\t\t<Line\r\n\t\t\t\t\tdata={{\r\n\t\t\t\t\t\tdatasets: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbackgroundColor: 'rgba(204, 16, 52, 0.5)',\r\n\t\t\t\t\t\t\t\tborderColor: '#CC1034',\r\n\t\t\t\t\t\t\t\tdata: data,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t}}\r\n\t\t\t\t\toptions={options}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { FormControl, MenuItem, Select, Card, CardContent } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n\tconst [countries, setCountries] = useState([]);\n\tconst [country, setCountry] = useState('worldwide');\n\tconst [countryInfo, setCountryInfo] = useState({});\n\tconst [tableData, setTableData] = useState([]);\n\tconst [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n\tconst [mapZoom, setMapZoom] = useState(3);\n\tconst [mapCountries, setMapCountries] = useState([]);\n\tconst [casesType, setCasesType] = useState('cases');\n\n\tuseEffect(() => {\n\t\tfetch('https://disease.sh/v3/covid-19/all')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetCountryInfo(data);\n\t\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\t// async --> send a request, wait for it, do something with the information\n\t\tconst getCountriesData = async () => {\n\t\t\tawait fetch('https://disease.sh/v3/covid-19/countries')\n\t\t\t\t.then((response) => response.json()) // converting the json string into a json data format\n\t\t\t\t.then((data) => {\n\t\t\t\t\tconst countries = data.map((country) => ({\n\t\t\t\t\t\tname: country.country, // we get the value of the \"country\" data from the JSON data fetched\n\t\t\t\t\t\tvalue: country.countryInfo.iso2, // we get the value of the \"countryInfo.iso2\" data from the JSON data fetched\n\t\t\t\t\t}));\n\t\t\t\t\tconst sortedData = sortData(data);\n\t\t\t\t\tsetTableData(sortedData);\n\t\t\t\t\tsetCountries(countries);\n\t\t\t\t\tsetMapCountries(data);\n\t\t\t\t});\n\t\t};\n\t\tgetCountriesData();\n\t}, []);\n\n\tconst onCountryChange = async (event) => {\n\t\tconst CountryCode = event.target.value;\n\n\t\tconst url =\n\t\t\tCountryCode === 'worldwide'\n\t\t\t\t? 'https://disease.sh/v3/covid-19/all'\n\t\t\t\t: `https://disease.sh/v3/covid-19/countries/${CountryCode}`;\n\n\t\tawait fetch(url)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetCountry(CountryCode);\n\t\t\t\tsetCountryInfo(data);\n\t\t\t\tconsole.log(data);\n\t\t\t\tif (CountryCode === 'worldwide') {\n\t\t\t\t\tsetMapCenter([34.80746, -40.4796]);\n\t\t\t\t\tsetMapZoom(3);\n\t\t\t\t} else {\n\t\t\t\t\tsetMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n\t\t\t\t\tsetMapZoom(4);\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"app__left\">\n\t\t\t\t<div className=\"app__header\">\n\t\t\t\t\t<h1>COVID-19 TRACKER</h1>\n\t\t\t\t\t<FormControl className=\"app__dropdown\">\n\t\t\t\t\t\t<Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n\t\t\t\t\t\t\t<MenuItem value=\"worldwide\">WorldWide</MenuItem>\n\t\t\t\t\t\t\t{countries.map((countryData) => (\n\t\t\t\t\t\t\t\t<MenuItem value={countryData.value}>{countryData.name}</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"app__stats\">\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tcolor=\"red\"\n\t\t\t\t\t\tactive={casesType === 'cases'}\n\t\t\t\t\t\tonClick={(event) => setCasesType('cases')}\n\t\t\t\t\t\ttitle=\"Corona-virus cases\"\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.cases)}\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayCases)}\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tcolor=\"green\"\n\t\t\t\t\t\tactive={casesType === 'recovered'}\n\t\t\t\t\t\tonClick={(event) => setCasesType('recovered')}\n\t\t\t\t\t\ttitle=\"Corona-virus recoveries\"\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.recovered)}\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayRecovered)}\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tcolor=\"blue\"\n\t\t\t\t\t\tactive={casesType === 'deaths'}\n\t\t\t\t\t\tonClick={(event) => setCasesType('deaths')}\n\t\t\t\t\t\ttitle=\"Corona-virus deaths\"\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.deaths)}\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayDeaths)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<Map casesType={casesType} center={mapCenter} zoom={mapZoom} countries={mapCountries} />\n\t\t\t\t{/* Map */}\n\t\t\t</div>\n\n\t\t\t<Card>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<div className=\"app__right\">\n\t\t\t\t\t\t<div className=\"app__table\">\n\t\t\t\t\t\t\t<h3>Live cases by country</h3>\n\t\t\t\t\t\t\t<Table countries={tableData} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"app__graph\">\n\t\t\t\t\t\t\t<h3>WorldWide new {casesType}</h3>\n\t\t\t\t\t\t\t<LineGraph casesType={casesType} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}